name: Build-Rust

on:
  push:
    branches: [ "main", "backend" ]
    paths: 
      - "backend/**"
  pull_request:
    branches: [ "main", "backend" ]
    paths: 
      - "backend/**"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: "postgres://postgres:password@postgres/mensa_app"
  FLICKR_API_KEY: ${{ secrets.FLICKR_PUBLIC_KEY }}
  SMTP_SERVER: ${{ vars.SMTP_SERVER }}
  SMTP_PORT: ${{ vars.SMTP_PORT }}
  SMTP_USERNAME: ${{ vars.SMTP_USERNAME }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  ADMIN_EMAIL: ${{ vars.ADMIN_EMAIL }}


jobs:
  build_rust:
    runs-on: ubuntu-latest
    container: rust:latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - run: rustup toolchain install stable --profile minimal
    - uses: Swatinem/rust-cache@v2
    - name: Check formatting
      run: |
        rustup component add rustfmt
        cargo fmt --check
    - name: Setup database
      run: |
        cargo install sqlx-cli --no-default-features --features native-tls,postgres
        cargo sqlx database setup
    - name: Check prepared sql query information
      run: cargo sqlx prepare --check
    - name: Build
      run: cargo build --verbose
    - name: Check linter warnings
      run: | 
          rustup component add clippy
          cargo clippy --all-targets -- -D warnings

  coverage:
    runs-on:                    ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    container:
      image:                    xd009642/tarpaulin:develop-nightly
      options:                  --security-opt seccomp=unconfined
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses:                   actions/checkout@v2
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
        with:
          key: "coverage"
      - name: Setup database
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres
          cargo sqlx database setup
      - name:                   Generate code coverage
        run: |
          cargo tarpaulin --all-targets --skip-clean --workspace --timeout 120 --out Xml
      - name:                   Upload to codecov.io
        uses:                   codecov/codecov-action@v2
        with:
          token:                ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error:     true


  test:
    runs-on: ubuntu-latest
    container: rust:latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - run: rustup toolchain install stable --profile minimal
    - uses: Swatinem/rust-cache@v2
    - name: Setup database
      run: |
        cargo install sqlx-cli --no-default-features --features native-tls,postgres
        cargo sqlx database setup
    - name: Check docs
      run: RUSTDOCFLAGS="-D warnings" cargo test --doc
    - name: Run tests
      run: cargo test --verbose
