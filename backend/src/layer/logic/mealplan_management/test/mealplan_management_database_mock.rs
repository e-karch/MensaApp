//! This crate contains mocks of [`MealplanManagementDatabaseMock`] for testing.

use async_trait::async_trait;

use crate::{
    interface::persistent_data::{
        model::{Canteen, Line, Meal, Side},
        MealplanManagementDataAccess, Result,
    },
    util::{
        Additive, Allergen, Date,
        MealType::{self, Vegan},
        Price, Uuid,
    },
};

fn get_meal(dish_number: u32) -> Meal {
    Meal {
        id: Uuid::default(),
        name: format!("Autogenerated Dish number {dish_number}"),
        meal_type: Vegan,
        price: Price {
            price_student: 1000,
            price_employee: 1,
            price_guest: 2,
            price_pupil: 3,
        },
        last_served: None,
        next_served: None,
        relative_frequency: 0.0,
        rating_count: 100,
        average_rating: 0.5,
        date: Date::default(),
        line_id: Uuid::default(),
    }
}

fn get_meals(dish_amount: u32) -> Vec<Meal> {
    let mut dishes = Vec::new();
    for i in 1..dish_amount {
        dishes.push(get_meal(i));
    }
    dishes
}

fn get_line(line_number: u32) -> Line {
    Line {
        id: Uuid::default(),
        name: format!("Autogenerated Line number {line_number}"),
        canteen_id: Uuid::default(),
    }
}

fn get_lines(line_amount: u32) -> Vec<Line> {
    let mut lines = Vec::new();
    for i in 1..line_amount {
        lines.push(get_line(i));
    }
    lines
}

fn get_canteen(canteen_number: u32) -> Canteen {
    Canteen {
        id: Uuid::default(),
        name: format!("Autogenerated Canteen number {canteen_number}"),
    }
}

fn get_canteens(canteen_amount: u32) -> Vec<Canteen> {
    let mut canteens = Vec::new();
    for i in 1..canteen_amount {
        canteens.push(get_canteen(i));
    }
    canteens
}

pub struct MealplanManagementDatabaseMock;

#[async_trait]
impl MealplanManagementDataAccess for MealplanManagementDatabaseMock {
    /// Determines all canteens with a similar name.
    async fn get_similar_canteens(&self, similar_name: String) -> Result<Vec<Canteen>> {
        Ok(get_canteens(10))
    }
    /// Determines all lines with a similar name.
    async fn get_similar_lines(&self, similar_name: String) -> Result<Vec<Line>> {
        Ok(get_lines(5))
    }
    /// Determines all meals with a similar name.
    async fn get_similar_meals(&self, similar_name: String) -> Result<Vec<Meal>> {
        Ok(get_meals(2))
    }
    /// Determines all sides with a similar name.
    async fn get_similar_sides(&self, similar_name: String) -> Result<Vec<Side>> {
        todo!()
    }

    /// Updates an existing canteen entity in the database. Returns the entity.
    async fn update_canteen(&self, uuid: Uuid, name: String) -> Result<Canteen> {
        Ok(get_canteen(10))
    }
    /// Updates an existing line entity in the database. Returns the entity.
    async fn update_line(&self, uuid: Uuid, name: String) -> Result<Line> {
        Ok(get_line(5))
    }
    /// Updates an existing meal entity in the database. Returns the entity.
    async fn update_meal(
        &self,
        uuid: Uuid,
        line_id: Uuid,
        date: Date,
        name: String,
        price: Price,
    ) -> Result<Meal> {
        Ok(get_meal(2))
    }
    /// Updates an existing side entity in the database. Returns the entity.
    async fn update_side(
        &self,
        uuid: Uuid,
        line_id: Uuid,
        date: Date,
        name: String,
        price: Price,
    ) -> Result<Side> {
        let side = Side {
            id: Uuid::default(),
            name,
            meal_type: Vegan,
            price,
        };
        Ok(side)
    }

    /// Adds a new canteen entity to the database. Returns the new entity.
    async fn insert_canteen(&self, name: String) -> Result<Canteen> {
        let canteen =  Canteen {
            id: Uuid::default(),
            name,
        };
        Ok(canteen)
    }
    /// Adds a new line entity to the database. Returns the new entity.
    async fn insert_line(&self, name: String) -> Result<Line> {
        let line = Line {
            id: Uuid::default(),
            name,
            canteen_id: Uuid::default(),
        };
        Ok(line)
    }
    /// Adds a new meal entity to the database. Returns the new entity.
    async fn insert_meal(
        &self,
        name: String,
        meal_type: MealType,
        price: Price,
        next_served: Date,
        _allergens: Vec<Allergen>,
        _additives: Vec<Additive>,
    ) -> Result<Meal> {
        let meal = Meal {
            id: Uuid::default(),
            name,
            meal_type,
            price,
            next_served: Some(next_served),
            last_served: Some(Date::default()),
            relative_frequency: 0.0,
            rating_count: 100,
            average_rating: 0.5,
            date: Date::default(),
            line_id: Uuid::default(),
        };
        Ok(meal)
    }
    /// Adds a new side entity to the database. Returns the new entity.
    async fn insert_side(
        &self,
        name: String,
        meal_type: MealType,
        price: Price,
        _next_served: Date,
        _allergens: Vec<Allergen>,
        _additives: Vec<Additive>,
    ) -> Result<Side> {
        let side = Side {
            id: Uuid::default(),
            name,
            meal_type,
            price,
        };
        Ok(side)
    }
}
